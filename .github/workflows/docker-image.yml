name: Docker Image CI

# Define quando o workflow deve ser acionado:
# - Em pushs para a branch 'main'
# - Quando tags são criadas
on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest  # Define o ambiente onde o job será executado

    steps:
    # Step 1: Checkout code
    # Faz o checkout do código fonte do repositório para o diretório de trabalho
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker Buildx
    # Configura o Docker Buildx para builds mais eficientes e multi-plataforma
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub
    # Faz login no Docker Hub usando as credenciais armazenadas nos secrets
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Extract version
    # Extrai a versão a partir da tag (se o push for uma tag) para usar como parte do nome da imagem
    - name: Extract version
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

 # Step 5: Build and push Docker image
    - name: Build and push Docker image
      id: build_and_push  # Adiciona um ID a este passo para referência
      uses: docker/build-push-action@v4
      with:
        context: .  # Define o contexto do build (diretório atual)
        push: true  # Habilita o push da imagem para o Docker Hub
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/microservice_products:latest
          ${{ secrets.DOCKER_USERNAME }}/microservice_products:${{ env.VERSION }}

    # Step 6: Image digest
    - name: Image digest
      run: echo "Image Digest: ${{ steps.build_and_push.outputs.digest }}"